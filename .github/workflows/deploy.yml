name: Deploy Infrastructure with Terraform

on:
  workflow_dispatch:
    inputs:
      PR_number:
        description: 'Pull request number'
        required: true

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: infrastructure/web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Modify instance name with PR number
        run: |
          INSTANCE_NAME="development-instance-PR-${{ github.event.inputs.PR_number }}"
          sed -i "s/Name = \"development-instance\"/Name = \"$INSTANCE_NAME\"/g" main.tf

      - name: Initialize Terraform
        run: terraform init

      - name: Plan infrastructure changes
        run: terraform plan -out=tfplan

      - name: Apply infrastructure changes
        run: terraform apply tfplan

#  setup_ansible:
#    runs-on: ubuntu-latest
#    needs: deploy_infrastructure
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up AWS CLI
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-2
#      #- name: Get EC2 Instance Public IP by Tag Name
#      #  run: |
#      #    # Fetch the public IP address of the EC2 instance based on its tag name with PR number
#      #    EC2_INSTANCE_IP=$(aws ec2 describe-instances \
#      #                        --filters "Name=tag:Name,Values=development-instance-PR-${{ github.event.inputs.PR_number }}" \
#      #                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
#      #                        --output text)
##
#      #    # Append the retrieved IP address to the Ansible inventory file
#      #    echo "development-instance-PR-${{ github.event.inputs.PR_number }} ansible_host=${EC2_INSTANCE_IP}" >> inventory
#      #    cat  inventory
#
#      - name: Get EC2 Instance Public IP by Tag Name
#        run: |
#          # Fetch the public IP address of the EC2 instance based on its tag name
#          aws ec2 describe-instances \
#            --filters "Name=tag:Name,Values=development-instance" \
#            --query 'Reservations[*].Instances[*].PublicIpAddress' \
#            --output text >> ./ansible/inventory
#          cat  ./ansible/inventory
#
#      - name: Cache Ansible inventory
#        uses: actions/cache@v2
#        with:
#          path: inventory
#          key: ansible-inventory-${{ hashFiles('inventory') }}    
#
#      - name: Persist Ansible inventory to artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: configurations
#          path: ./ansible/inventory
#
#  copy_code:
#    runs-on: ubuntu-latest
#    needs: deploy_infrastructure
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up AWS CLI
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-2  
#
#      #- name: Get EC2 Instance IP ans save as HOST
#      #  run: |
#      #    # Fetch the public IP address of the EC2 instance based on its tag name with PR number
#      #    EC2_INSTANCE_IP=$(aws ec2 describe-instances \
#      #                        --filters "Name=tag:Name,Values=development-instance-PR-${{ github.event.inputs.PR_number }}" \
#      #                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
#      #                        --output text)
##
#      #    # Set the retrieved IP address as the HOST environment variable
#      #    echo "HOST=${EC2_INSTANCE_IP}" >> $GITHUB_ENV
#
#      - name: Get EC2 Instance IP and save as HOST
#        run: |
#          # Fetch the public IP address of the EC2 instance based on its tag name
#          EC2_INSTANCE_IP=$(aws ec2 describe-instances \
#                              --filters "Name=tag:Name,Values=development-instance" \
#                              --query 'Reservations[*].Instances[*].PublicIpAddress' \
#                              --output text)
#
#          # Set the retrieved IP address as the HOST environment variable
#          echo "HOST=${EC2_INSTANCE_IP}" >> $GITHUB_ENV
#
#      - name: Copy to EC2
#        uses: easingthemes/ssh-deploy@v2
#        with:
#          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#          REMOTE_HOST: ${{ env.HOST }}
#          REMOTE_USER: ubuntu
#          source: ./
#          target: ~/app
#
#  update-nginx-config:
#    runs-on: ubuntu-latest
#    needs: deploy_infrastructure
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up AWS CLI
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-2
#
#    #  - name: Get EC2 Instance IP and update Nginx config
#    #    run: |
#    #      # Fetch the public IP address of the EC2 instance based on its tag name
#    #      EC2_INSTANCE_IP=$(aws ec2 describe-instances \
#    #                          --filters "Name=tag:Name,Values=development-instance" \
#    #                          --query 'Reservations[*].Instances[*].PublicIpAddress' \
#    #                          --output text)
##
#    #      # Replace the line in the Nginx config file with the fetched IP
#    #      sed -i "s/server_name your_domain.com;/server_name $EC2_INSTANCE_IP;/g" ./ansible/default.conf
#
#      - name: Cache Nginx confix update
#        uses: actions/cache@v2
#        with:
#          path: configurations
#          key: default.conf-${{ hashFiles('default.conf') }}
#
#      - name: Save updated Nginx config as artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: configurations
#          path: ./ansible/default.conf
#      
#
#  configure_server:
#    runs-on: ubuntu-latest
#    needs:
#      - copy_code
#      - update-nginx-config
#      - setup_ansible
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up AWS CLI
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-2
#
#      - name: Attach Ansible Inventory
#        uses: actions/download-artifact@v3
#        with:
#          name: configurations
#          path: ~/ansible
#
#      - name: Attach updated Nginx config
#        uses: actions/download-artifact@v3
#        with:
#          name: configurations
#          path: ~/ansible
#
#      - name: Install dependencies
#        run: sudo apt-get install ansible tar gzip       
#
#      #- name: Restore Ansible inventory from cache
#      #  uses: actions/cache@v2
#      #  id: restore-cache
#      #  with:
#      #    path: inventory
#      #    key: ansible-inventory-${{ hashFiles('inventory') }}  # Use the same key used for caching in the setup_ansible job
##
#      #- name: Use restored Ansible inventory file
#      #  run: |
#      #    if [ -f "inventory" ]; then
#      #      cat inventory  # Or perform other actions using the restored inventory file
#      #    else
#      #      echo "No inventory file found in cache."
#      #    fi
#
#      - name: get ssh key for ansible
#        uses: webfactory/ssh-agent@v0.6.0
#        with:
#            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#
#      - name: run ansible playbook
#        run: |
#          cd ansible
#          ansible-playbook -i ~/ansible/inventory configure.yml
#            